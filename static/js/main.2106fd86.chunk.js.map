{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/dropzone/index.tsx","pages/CreatePoint/index.tsx","pages/Points/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","Dropzone","onFileUploaded","useState","selectedFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","initialPosition","setInitialPosition","name","email","whatsapp","formData","setFormData","selectedUf","setSelectedUf","selectedCity","setSelectedCity","selectedItems","setSelectedItems","selectedPosition","setPosition","selectedFile","setSelectedFile","history","useHistory","handleInputChange","event","target","value","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","response","UfInitials","map","sigla","cityNames","nome","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","key","item","findIndex","filteredItems","filter","handleSelectItem","includes","image_url","title","Points","points","setPoints","selectedPointId","setSelectedPointId","showPoints","setShowPoints","params","filteredPoints","point","length","riseOnHover","onCLick","sPoint","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2106fd86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React from 'react';\r\nimport './styles.css';\r\nimport { FiLogIn, FiSearch } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div id=\"page-home\">\r\n            <div className=\"header\">\r\n                <header>\r\n                    <img src={logo} alt=\"EcoletaIMG\"/>\r\n\r\n                    <Link to=\"/create-point\">\r\n                        <span>\r\n                            <FiLogIn />\r\n                        </span>\r\n                        <strong>\r\n                            Cadastre um ponto de coleta\r\n                        </strong>\r\n                    </Link>  \r\n                </header>\r\n            </div>    \r\n            <div className=\"content\">\r\n                <main>\r\n                    <h1>Seu marketplace de coleta de resíduos.</h1>\r\n                    <p>Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.</p>\r\n                    <Link to=\"/points\">\r\n                        <span>\r\n                            <FiSearch />\r\n                        </span>\r\n                        <strong>\r\n                            Procurar pontos de coleta\r\n                        </strong>\r\n                    </Link>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://floating-brushlands-74410.herokuapp.com'\r\n});\r\n\r\nexport default api;","import React, {useCallback, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport './style.css';\r\nimport {FiUpload} from 'react-icons/fi';\r\n\r\ninterface Props{\r\n    onFileUploaded: ((file: File) => void)\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({onFileUploaded}) => {\r\n    const[selectedFileUrl, setSelectedFileUrl] = useState('');\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        const file = acceptedFiles[0];\r\n\r\n        const fileUrl = URL.createObjectURL(file);\r\n\r\n        setSelectedFileUrl(fileUrl);\r\n        onFileUploaded(file);\r\n    }, [onFileUploaded])\r\n    const {getRootProps, getInputProps,} = useDropzone({onDrop, accept: 'image/*'})\r\n\r\n    return (\r\n    <div className=\"dropzone\" {...getRootProps()}>\r\n        <input {...getInputProps()} accept='image/*' />   \r\n\r\n        { selectedFileUrl\r\n            ? <img src={selectedFileUrl} alt=\"Point thumbnail\" />\r\n            : (\r\n                <p>\r\n                <FiUpload />\r\n                    Imagem do estabelecimento\r\n                </p>\r\n            )\r\n        }\r\n\r\n        \r\n    </div>\r\n    )\r\n    }\r\n\r\nexport default Dropzone;","import React, { useEffect, useState, ChangeEvent, FormEvent} from 'react';\r\nimport { Link , useHistory} from 'react-router-dom';\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport { Map, TileLayer, Marker } from 'react-leaflet'; \r\nimport axios from 'axios';\r\nimport {LeafletMouseEvent} from 'leaflet';\r\nimport api from '../../services/api';\r\nimport Dropzone from '../../components/dropzone'\r\n\r\nimport './styles.css';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\n//informar o tipo da variavel\r\n\r\ninterface Item {\r\n    id: number;\r\n    title: string;\r\n    image_url: string;\r\n}\r\n\r\ninterface IBGEUFResponse {\r\n    sigla: string;\r\n}\r\n\r\ninterface IBGEUCityResponse {\r\n    nome: string;\r\n}\r\n\r\n\r\nconst CreatePoint = () =>{\r\n   const [items, setItems] = useState<Item[]>([]);\r\n   const [ufs, setUfs] = useState<string[]>([]);\r\n   const [cities, setCities] = useState<string[]>([]);\r\n\r\n   const [initialPosition, setInitialPosition] = useState<[number, number]>([0,0]);\r\n\r\n   const [formData, setFormData] = useState({\r\n       name: '',\r\n       email:'',\r\n       whatsapp: '',\r\n   })\r\n\r\n   const [selectedUf, setSelectedUf] = useState('0');\r\n   const [selectedCity, setSelectedCity] = useState('0');\r\n   const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n   const [selectedPosition, setPosition] = useState<[number, number]>([0,0]);\r\n   const [selectedFile, setSelectedFile ] = useState<File>();\r\n\r\n   const history = useHistory();\r\n\r\n   useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(position =>{\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        setInitialPosition([latitude, longitude]);\r\n    })\r\n   }, [])\r\n\r\n    useEffect(() => {\r\n        api.get('items').then( response => {\r\n           setItems(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\r\n        .then(response => {\r\n            const UfInitials = response.data.map(uf => uf.sigla);\r\n\r\n            setUfs(UfInitials);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(selectedUf === '0'){\r\n            return;\r\n        }\r\n            axios\r\n            .get<IBGEUCityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`)\r\n            .then(response => {\r\n                const cityNames = response.data.map(city => city.nome);\r\n\r\n                setCities(cityNames);\r\n            })\r\n    }, [selectedUf])\r\n\r\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>){\r\n        const uf = event.target.value;\r\n        setSelectedUf(uf); \r\n    }\r\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>){\r\n        const city = event.target.value;\r\n        setSelectedCity(city);\r\n    }\r\n    function handleMapClick(event: LeafletMouseEvent){\r\n        setPosition([ event.latlng.lat, event.latlng.lng ])\r\n    }\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>){\r\n        const { name, value }  = event.target\r\n        \r\n        setFormData({ ...formData, [name]: value });\r\n    }\r\n    function handleSelectItem(id: number){\r\n        const alreadySelected = selectedItems.findIndex(item => item === id);\r\n\r\n        if(alreadySelected >= 0){\r\n            const filteredItems = selectedItems.filter(item => item !== id);\r\n\r\n            setSelectedItems(filteredItems);\r\n        }else{\r\n            setSelectedItems([...selectedItems, id ]);\r\n        }\r\n    }\r\n    async function handleSubmit(event: FormEvent){\r\n        event.preventDefault();\r\n\r\n        const { name, email, whatsapp } = formData;\r\n        const uf = selectedUf;\r\n        const city = selectedCity;\r\n        const [latitude, longitude] = selectedPosition;\r\n        const items = selectedItems\r\n\r\n        const data = new FormData();\r\n\r\n\r\n        data.append('name',name);\r\n        data.append('email',email);\r\n        data.append('whatsapp',whatsapp);\r\n        data.append('uf',uf);\r\n        data.append('city',city);\r\n        data.append('latitude',String(latitude));\r\n        data.append('longitude',String(longitude));\r\n        data.append('items',items.join(','));\r\n        \r\n        if(selectedFile){\r\n            data.append('image', selectedFile);\r\n        }\r\n\r\n        await api.post('points', data);\r\n\r\n        alert('Ponto de coleta criado!');\r\n\r\n        history.push('/')\r\n    }\r\n    return(\r\n        <div id=\"page-create-point\">\r\n            <header>\r\n                <img src={logo} alt=\"logoSVG\"/>\r\n\r\n                <Link to=\"/\">\r\n                    <FiArrowLeft />\r\n                    Voltar para home\r\n                </Link>\r\n            </header>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>Cadastro do <br /> ponto de coleta</h1>\r\n\r\n                <Dropzone  onFileUploaded={setSelectedFile} />\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Dados</h2>\r\n                    </legend>\r\n\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"name\">Nome da entidade</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"email\">E-mail</label>\r\n                                <input \r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n                                <input \r\n                                    type=\"text\"\r\n                                    name=\"whatsapp\"\r\n                                    id=\"whatsapp\"\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                         </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Endereço</h2>\r\n                        <span>Selecione o endereço no mapa</span>\r\n                    </legend>\r\n\r\n                    <Map center={initialPosition} zoom={15} onClick={handleMapClick}>\r\n                        <TileLayer\r\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <Marker position={selectedPosition} zoom={15}></Marker>\r\n                    </Map>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"uf\">Estado(UF)</label>\r\n                            <select \r\n                            name=\"uf\" \r\n                            id=\"uf\" \r\n                            value={selectedUf}\r\n                            onChange={handleSelectUf}\r\n                            >\r\n                                <option value=\"0\">Selecione um Estado</option>\r\n                                {ufs.map(uf => (\r\n                                    <option key={uf} value={uf}>{uf}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"city\">Cidade</label>\r\n                            <select \r\n                            name=\"city\" \r\n                            id=\"city\"\r\n                            value={selectedCity}\r\n                            onChange={handleSelectCity}\r\n                            >\r\n                                <option value=\"0\">Selecione uma cidade</option>\r\n                                {cities.map(city => (\r\n                                    <option key={city} value={city}>{city}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Ítems de coleta</h2>\r\n                        <span>Selecione um ou mais items abaixo</span>\r\n                    </legend>\r\n\r\n                    <ul className=\"items-grid\">\r\n                        {items.map(item => (\r\n                            <li \r\n                            key={item.id} \r\n                            onClick={() => \r\n                            handleSelectItem(item.id)}\r\n                            className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n                            >\r\n                                <img src={item.image_url} alt={item.title}/>\r\n                                <span>{item.title}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </fieldset>\r\n\r\n                <button type=\"submit\">\r\n                   Cadastrar ponto de coleta \r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePoint; ","import React, { useEffect, useState, ChangeEvent} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';    \r\nimport axios from 'axios';\r\nimport api from '../../services/api';\r\n\r\nimport './style.css';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\n//informar o tipo da variavel\r\n\r\ninterface Item {\r\n    id: number;\r\n    title: string;\r\n    image_url: string;\r\n}\r\ninterface Point {\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    image_url: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    whatsapp: number;\r\n    email: string;\r\n    items: number;\r\n  }\r\n\r\ninterface IBGEUFResponse {\r\n    sigla: string;\r\n}\r\n\r\ninterface IBGEUCityResponse {\r\n    nome: string;\r\n}\r\n\r\n\r\nconst Points = () =>{\r\n   const [items, setItems] = useState<Item[]>([]);\r\n   const [ufs, setUfs] = useState<string[]>([]);\r\n   const [cities, setCities] = useState<string[]>([]);\r\n   const [points, setPoints] = useState<Point[]>([]);\r\n\r\n//    const [initialPosition, setInitialPosition] = useState<[number, number]>([0,0]);\r\n\r\n   const [selectedUf, setSelectedUf] = useState('0');\r\n   const [selectedCity, setSelectedCity] = useState('0');\r\n   const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n   const [selectedPointId, setSelectedPointId] = useState<number>(0);\r\n   const [showPoints, setShowPoints] = useState<Point[]>([]);\r\n\r\n//    useEffect(() => {\r\n//     navigator.geolocation.getCurrentPosition(position =>{\r\n//         const { latitude, longitude } = position.coords;\r\n\r\n//         setInitialPosition([latitude, longitude]);\r\n//     })\r\n//    }, [])\r\n\r\n    useEffect(() => {\r\n        api.get('items').then( response => {\r\n           setItems(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\r\n        .then(response => {\r\n            const UfInitials = response.data.map(uf => uf.sigla);\r\n\r\n            setUfs(UfInitials);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(selectedUf === '0'){\r\n            return;\r\n        }\r\n            axios\r\n            .get<IBGEUCityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`)\r\n            .then(response => {\r\n                const cityNames = response.data.map(city => city.nome);\r\n\r\n                setCities(cityNames);\r\n            })\r\n    }, [selectedUf])\r\n    \r\n\r\n    useEffect(() => {\r\n        api.get('points', {\r\n          params: {\r\n            city: selectedCity,\r\n            uf: selectedUf,\r\n            items: selectedItems\r\n          }\r\n        }).then(response => {\r\n            if(selectedItems === []){\r\n                setPoints([]);\r\n            }\r\n            setPoints([]);\r\n            setPoints(response.data);\r\n        })\r\n      }, [selectedItems]);\r\n    \r\n      useEffect(() => {\r\n        const filteredPoints = points.filter(point =>\r\n            (point.id === selectedPointId))\r\n        setShowPoints( filteredPoints);\r\n      },[selectedPointId]);\r\n\r\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>){\r\n        const uf = event.target.value;\r\n        setSelectedUf(uf); \r\n    }\r\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>){\r\n        const city = event.target.value;\r\n        setSelectedCity(city);\r\n    }\r\n    function handleSelectItem(id: number){\r\n        const alreadySelected = selectedItems.findIndex(item => item === id);\r\n\r\n        if(alreadySelected >= 0){\r\n            const filteredItems = selectedItems.filter(item => item !== id);\r\n\r\n            setSelectedItems(filteredItems);\r\n        }else{\r\n            setSelectedItems([...selectedItems, id ]);\r\n        }\r\n    }\r\n\r\n    function handlePointClick(id: number){\r\n        setSelectedPointId(id);\r\n    }\r\n\r\n    return(\r\n        <div id=\"page-create-point\">\r\n            <header>\r\n                <img src={logo} alt=\"logoSVG\" />\r\n\r\n                <Link to=\"/\">\r\n                    <FiArrowLeft />\r\n                    Voltar para home\r\n                </Link>\r\n            </header>\r\n\r\n            <form>\r\n             <h1>{selectedCity ==='0' || selectedUf === '0' ?  \"Selecione uma cidade para buscar pontos de coleta\"  : `Pontos de coleta em: ${selectedCity},${selectedUf}`}</h1>\r\n                <fieldset>\r\n                    {\r\n                     points.length > 0 && \r\n                    <>   \r\n                    <label>Clique no ponto para mais detalhes</label> \r\n                    <Map \r\n                    center={[points[0].latitude, points[0].longitude]} \r\n                    zoom={10} \r\n                    >\r\n                        <TileLayer\r\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        {\r\n                        points.map(point =>(\r\n                        <Marker \r\n                            key={point.id} \r\n                            position={[point.latitude, point.longitude]}\r\n                            riseOnHover={true} \r\n                            title={point.name} \r\n                            onCLick={() => handlePointClick(point.id)}/>)) \r\n                        }\r\n                    </Map>\r\n                    </>\r\n                    }\r\n                    {\r\n                     selectedPointId !== 0 &&\r\n                      \r\n                    showPoints.map(sPoint => (\r\n                        <div  key={sPoint.id} className=\"detailContainer\">\r\n                            <img src={sPoint.image_url} alt=\"Point\" />\r\n                            <div className=\"list\">\r\n                                <ul>\r\n                                    <li><h3>{sPoint.name}</h3></li>\r\n                                    <li><h4>Telefone(Whatsapp): </h4>{sPoint.whatsapp}</li>\r\n                                    <li><h4> Email:</h4> {sPoint.email}</li>\r\n                                    <li><h4> Items coletados:</h4> {}</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>     \r\n                    ))  \r\n                    }\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"uf\">Estado(UF)</label>\r\n                            <select \r\n                            name=\"uf\" \r\n                            id=\"uf\" \r\n                            value={selectedUf}\r\n                            onChange={handleSelectUf}\r\n                            >\r\n                                <option value=\"0\">Selecione um Estado</option>\r\n                                {ufs.map(uf => (\r\n                                    <option key={uf} value={uf}>{uf}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"city\">Cidade</label>\r\n                            <select \r\n                            name=\"city\" \r\n                            id=\"city\"\r\n                            value={selectedCity}\r\n                            onChange={handleSelectCity}\r\n                            >\r\n                                <option value=\"0\">Selecione uma cidade</option>\r\n                                {cities.map(city => (\r\n                                    <option key={city} value={city}>{city}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Ítems de coleta</h2>\r\n                        <span>Selecione um ou mais items abaixo</span>\r\n                    </legend>\r\n\r\n                    <ul className=\"items-grid\">\r\n                        {items.map(item => (\r\n                            <li \r\n                            key={item.id} \r\n                            onClick={() => \r\n                            handleSelectItem(item.id)}\r\n                            className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n                            >\r\n                                <img src={item.image_url} alt={item.title}/>\r\n                                <span>{item.title}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Points; \r\n\r\n","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport CreatePoint from './pages/CreatePoint';\r\nimport Points from './pages/Points';\r\n\r\n\r\nconst Routes =  () => {\r\n    return(\r\n        <BrowserRouter>\r\n            <Route  component={Home} path='https://jlwolff.github.io/ecoleta-frontend/' exact />\r\n            <Route  component={CreatePoint} path='https://jlwolff.github.io/ecoleta-frontend/create-point' />]\r\n            <Route  component={Points} path='https://jlwolff.github.io/ecoleta-frontend/points' />\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\n\n\nimport Routes from './routes';\n\nfunction App() {\n   \n  return ( \n    <Routes />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}